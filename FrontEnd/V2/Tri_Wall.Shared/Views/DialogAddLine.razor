@rendermode InteractiveWebAssembly
@implements IDialogContentComponent<Dictionary<string,object>>
<style>
    ::deep > fluent-dialog::part(control) {
        --dialog-width: 300px;
        --dialog-height: 350px;
        padding: 2rem !important;
    }
</style>
@* Header *@
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.AddCircle())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

@* Footer *@
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync">Save</FluentButton>
</FluentDialogFooter>

@* Body *@
<FluentDialogBody Style="overflow-y:scroll;">
    <FluentLayout Style="margin-top: 0px;">
        <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
            <FluentBodyContent Class="body-content" Style="overflow:hidden;">
                <div class="content">
                    <FluentGrid Spacing="2" AdaptiveRendering="true">
                        <FluentGridItem xs="12" sm="4" lg="6" xl="6">
                            <FluentAutocomplete Required
                                                TOption="Items"
                                                Width="100%"
                                                Placeholder="Item Master Data"
                                                OnOptionsSearch="OnSearch"
                                                MaximumOptionsSearch="1"
                                                Label="Item Code"
                                                Virtualize="true"
                                                Items="_items"
                                                MaximumSelectedOptions="1"
                                                OptionText="@(item => $"{item.ItemCode} - {item.ItemName}")"
                                                @bind-SelectedOptions="@_selectedItem"
                                                ValueChanged="OnValueChanged" />
                        </FluentGridItem>
                        <FluentGridItem xs="12" sm="4" lg="3" xl="3">
                            <FluentTextField Label="Price" Value="@_selectedItem.FirstOrDefault()?.PriceUnit" style="width: 100%;"></FluentTextField>
                        </FluentGridItem>
                        <FluentGridItem xs="12" sm="4" lg="3" xl="3">
                            <FluentTextField Label="Qty" style="width: 100%;"></FluentTextField>
                        </FluentGridItem>
                        <FluentGridItem xs="12" sm="4" lg="3" xl="3">
                            <FluentSelect Width="100%"
                                          TOption="VatGroups"
                                          Required
                                          Label="Vat Code"
                                          Items="_vatGroups"
                                          OptionText="@(i=> i.Code)"
                                          OptionValue="@(i=>i.Code)"
                                          SelectedOption="_vatGroups?.FirstOrDefault()"
                                          @bind-Value="@DataResult.VatCode" />
                        </FluentGridItem>
                        <FluentGridItem xs="12" sm="4" lg="3" xl="3">
                            <FluentSelect Width="100%"
                                          TOption="Warehouses"
                                          Required
                                          Label="Warehouse"
                                          Items="_warehouses"
                                          OptionText="@(i=> i.Name)"
                                          OptionValue="@(i=>i.Code)"
                                          SelectedOption="_warehouses?.FirstOrDefault()" 
                                          @bind-Value="@DataResult.WarehouseCode"/>
                        </FluentGridItem>
                        @if (_isItemBatch)
                        {
                            <div class="grid" style="width: 100%; overflow:auto;">
                                <FluentDataGrid TGridItem="string" ResizableColumns="true"
                                                GridTemplateColumns="0.5fr 0.5fr 1fr 0.5fr 0.5fr 0.5fr 0.5fr 0.5fr" Style=@dataGrid>
                                    <PropertyColumn Title="No." Property="@(c => c)" Sortable="true" Align="Align.Start" Tooltip="true"
                                                    TooltipText="@(c => "That is x GOLD!!")" />
                                    <PropertyColumn Title="ItemCode" Property="@(c => c)" Sortable="true" Align="Align.Start" Tooltip="true"
                                                    TooltipText="@(c => "That is x GOLD!!")" />
                                    <PropertyColumn Title="ItemName" Property="@(c => c)" Sortable="true" Align="Align.Start" Tooltip="true"
                                                    TooltipText="@(c => "That is x GOLD!!")" />
                                    <PropertyColumn Title="Qty" Property="@(c => c)" Sortable="true" Align="Align.Start" Tooltip="true"
                                                    TooltipText="@(c => "That is x GOLD!!")" />
                                    <PropertyColumn Title="Batch" Property="@(c => c)" Sortable="true" Align="Align.Start" Tooltip="true"
                                                    TooltipText="@(c => "That is x GOLD!!")" />
                                </FluentDataGrid>
                            </div>
                        }
                        @if (_isItemSerial)
                        {
                            <div class="grid" style="width: 100%; overflow:auto;">
                                <FluentDataGrid TGridItem="string" ResizableColumns="true"
                                                GridTemplateColumns="0.5fr 0.5fr 1fr 0.5fr 0.5fr 0.5fr 0.5fr 0.5fr" Style=@dataGrid>
                                    <PropertyColumn Title="No." Property="@(c => c)" Sortable="true" Align="Align.Start" Tooltip="true"
                                                    TooltipText="@(c => "That is x GOLD!!")" />
                                    <PropertyColumn Title="ItemCode" Property="@(c => c)" Sortable="true" Align="Align.Start" Tooltip="true"
                                                    TooltipText="@(c => "That is x GOLD!!")" />
                                    <PropertyColumn Title="ItemName" Property="@(c => c)" Sortable="true" Align="Align.Start" Tooltip="true"
                                                    TooltipText="@(c => "That is x GOLD!!")" />
                                    <PropertyColumn Title="Qty" Property="@(c => c)" Sortable="true" Align="Align.Start" Tooltip="true"
                                                    TooltipText="@(c => "That is x GOLD!!")" />
                                    <PropertyColumn Title="Serial" Property="@(c => c)" Sortable="true" Align="Align.Start" Tooltip="true"
                                                    TooltipText="@(c => "That is x GOLD!!")" />
                                </FluentDataGrid>
                            </div>
                        }
                    </FluentGrid>
                </div>
            </FluentBodyContent>
        </FluentStack>
    </FluentLayout>
</FluentDialogBody>
@code {
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;
    [Parameter]
    public Dictionary<string, object> Content { get; set; } = default!;
    private GoodReceiptPOLine DataResult { get; set; } = new();
    private bool _isItemBatch;
    private bool _isItemSerial;
    private IEnumerable<Items> _selectedItem = Array.Empty<Items>();
    private IEnumerable<Items> _items { 
        get => Content ["item"] as IEnumerable<Items> ?? new List<Items>(); }
    private IEnumerable<VatGroups>? _vatGroups { get => Content["taxPurchase"] as IEnumerable<VatGroups>; }
    private IEnumerable<Warehouses>? _warehouses { get => Content["warehouse"] as IEnumerable<Warehouses>; }

    private void OnSearch(OptionsSearchEventArgs<Items> e)
    {
        e.Items = _items?.Where(i => i.ItemCode.Contains(e.Text, StringComparison.OrdinalIgnoreCase) ||
                            i.ItemName.Contains(e.Text, StringComparison.OrdinalIgnoreCase))
                            .OrderBy(i => i.ItemCode);
    }
    string? dataGrid = "width: 100%;height:305px";
    private async Task SaveAsync()
    {
        await Dialog.CloseAsync(DataResult);
    }
    void OnValueChanged(string newValue)
    {
        if (_selectedItem.Count() > 0)
        {
            if (_selectedItem.FirstOrDefault()?.ItemType == "S")
            {
                _isItemSerial = true;
                _isItemBatch = false;
            }
            else if (_selectedItem.FirstOrDefault()?.ItemType == "B")
            {
                _isItemSerial = false;
                _isItemBatch = true;
            }
            else
            {
                _isItemBatch = false;
                _isItemSerial = false;
            }
        }
        else
        {
            _isItemBatch = false;
            _isItemSerial = false;
        }
    }
}